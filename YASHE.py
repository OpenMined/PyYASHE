# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_YASHE')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_YASHE')
    _YASHE = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_YASHE', [dirname(__file__)])
        except ImportError:
            import _YASHE
            return _YASHE
        try:
            _mod = imp.load_module('_YASHE', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _YASHE = swig_import_helper()
    del swig_import_helper
else:
    import _YASHE
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def pari_init(parisize: 'size_t', maxprime: 'int') -> "void":
    return _YASHE.pari_init(parisize, maxprime)
pari_init = _YASHE.pari_init

def pari_close() -> "void":
    return _YASHE.pari_close()
pari_close = _YASHE.pari_close

import atexit
pari_init(2000000000, 2)
atexit.register(pari_close)

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        this = _YASHE.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _YASHE.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index: 'size_t') -> "int":
        return _YASHE.intArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'int') -> "void":
        return _YASHE.intArray___setitem__(self, index, value)

    def cast(self) -> "int *":
        return _YASHE.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_YASHE.intArray_frompointer)
    else:
        frompointer = _YASHE.intArray_frompointer
intArray_swigregister = _YASHE.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t: 'int *') -> "intArray *":
    return _YASHE.intArray_frompointer(t)
intArray_frompointer = _YASHE.intArray_frompointer

class ciphertext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ciphertext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ciphertext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _YASHE.ciphertext_value_set
    __swig_getmethods__["value"] = _YASHE.ciphertext_value_get
    if _newclass:
        value = _swig_property(_YASHE.ciphertext_value_get, _YASHE.ciphertext_value_set)
    __swig_setmethods__["pk"] = _YASHE.ciphertext_pk_set
    __swig_getmethods__["pk"] = _YASHE.ciphertext_pk_get
    if _newclass:
        pk = _swig_property(_YASHE.ciphertext_pk_get, _YASHE.ciphertext_pk_set)
    __swig_destroy__ = _YASHE.delete_ciphertext
    __del__ = lambda self: None

    def initialize(self, *args) -> "void":
        return _YASHE.ciphertext_initialize(self, *args)

    def packing_method(self, m: 'pari_GEN', pk: 'public_key') -> "void":
        return _YASHE.ciphertext_packing_method(self, m, pk)

    def __add__(self, ct: 'ciphertext') -> "ciphertext":
        return _YASHE.ciphertext___add__(self, ct)

    def __mul__(self, ct: 'ciphertext') -> "ciphertext":
        return _YASHE.ciphertext___mul__(self, ct)

    def __sub__(self, ct: 'ciphertext') -> "ciphertext":
        return _YASHE.ciphertext___sub__(self, ct)

    def decrypt(self, sk: 'secret_key') -> "pari_GEN":
        return _YASHE.ciphertext_decrypt(self, sk)

    def __init__(self, *args):
        this = _YASHE.new_ciphertext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ciphertext_swigregister = _YASHE.ciphertext_swigregister
ciphertext_swigregister(ciphertext)

class secret_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, secret_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, secret_key, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _YASHE.secret_key_params_set
    __swig_getmethods__["params"] = _YASHE.secret_key_params_get
    if _newclass:
        params = _swig_property(_YASHE.secret_key_params_get, _YASHE.secret_key_params_set)

    def __init__(self, *args):
        this = _YASHE.new_secret_key(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initialize(self, sk: 'pari_GEN', params: 'parameters') -> "void":
        return _YASHE.secret_key_initialize(self, sk, params)

    def decrypt(self, ct: 'pari_GEN') -> "pari_GEN":
        return _YASHE.secret_key_decrypt(self, ct)

    def serialize(self) -> "void":
        return _YASHE.secret_key_serialize(self)
    __swig_destroy__ = _YASHE.delete_secret_key
    __del__ = lambda self: None
secret_key_swigregister = _YASHE.secret_key_swigregister
secret_key_swigregister(secret_key)

class public_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, public_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, public_key, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pk"] = _YASHE.public_key_pk_set
    __swig_getmethods__["pk"] = _YASHE.public_key_pk_get
    if _newclass:
        pk = _swig_property(_YASHE.public_key_pk_get, _YASHE.public_key_pk_set)
    __swig_setmethods__["evk"] = _YASHE.public_key_evk_set
    __swig_getmethods__["evk"] = _YASHE.public_key_evk_get
    if _newclass:
        evk = _swig_property(_YASHE.public_key_evk_get, _YASHE.public_key_evk_set)
    __swig_setmethods__["params"] = _YASHE.public_key_params_set
    __swig_getmethods__["params"] = _YASHE.public_key_params_get
    if _newclass:
        params = _swig_property(_YASHE.public_key_params_get, _YASHE.public_key_params_set)

    def __init__(self, *args):
        this = _YASHE.new_public_key(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initialize(self, pk: 'pari_GEN', evk: 'pari_GEN', params: 'parameters') -> "void":
        return _YASHE.public_key_initialize(self, pk, evk, params)

    def encrypt(self, m: 'pari_GEN') -> "pari_GEN":
        return _YASHE.public_key_encrypt(self, m)

    def relinearize(self, ct_mult: 'pari_GEN') -> "pari_GEN":
        return _YASHE.public_key_relinearize(self, ct_mult)

    def serialize(self) -> "void":
        return _YASHE.public_key_serialize(self)
    __swig_destroy__ = _YASHE.delete_public_key
    __del__ = lambda self: None
public_key_swigregister = _YASHE.public_key_swigregister
public_key_swigregister(public_key)

class key_pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, key_pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, key_pair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sk"] = _YASHE.key_pair_sk_set
    __swig_getmethods__["sk"] = _YASHE.key_pair_sk_get
    if _newclass:
        sk = _swig_property(_YASHE.key_pair_sk_get, _YASHE.key_pair_sk_set)
    __swig_setmethods__["pk"] = _YASHE.key_pair_pk_set
    __swig_getmethods__["pk"] = _YASHE.key_pair_pk_get
    if _newclass:
        pk = _swig_property(_YASHE.key_pair_pk_get, _YASHE.key_pair_pk_set)

    def __init__(self):
        this = _YASHE.new_key_pair()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _YASHE.delete_key_pair
    __del__ = lambda self: None
key_pair_swigregister = _YASHE.key_pair_swigregister
key_pair_swigregister(key_pair)

class key_gen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, key_gen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, key_gen, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _YASHE.new_key_gen()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def generate_key(self, n: 'int', Q: 'int', T: 'int', w: 'int', sigma_error: 'double', sigma_key: 'double') -> "key_pair":
        return _YASHE.key_gen_generate_key(self, n, Q, T, w, sigma_error, sigma_key)
    __swig_destroy__ = _YASHE.delete_key_gen
    __del__ = lambda self: None
key_gen_swigregister = _YASHE.key_gen_swigregister
key_gen_swigregister(key_gen)

M_PI = _YASHE.M_PI

def _print(x: 'GEN') -> "void":
    return _YASHE._print(x)
_print = _YASHE._print
class pari_GEN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pari_GEN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pari_GEN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _YASHE.pari_GEN_value_set
    __swig_getmethods__["value"] = _YASHE.pari_GEN_value_get
    if _newclass:
        value = _swig_property(_YASHE.pari_GEN_value_get, _YASHE.pari_GEN_value_set)

    def initialize(self, x: 'GEN') -> "void":
        return _YASHE.pari_GEN_initialize(self, x)

    def __add__(self, GEN_2: 'pari_GEN') -> "pari_GEN":
        return _YASHE.pari_GEN___add__(self, GEN_2)

    def __mul__(self, GEN_2: 'pari_GEN') -> "pari_GEN":
        return _YASHE.pari_GEN___mul__(self, GEN_2)

    def __truediv__(self, *args):
        return _YASHE.pari_GEN___truediv__(self, *args)
    __div__ = __truediv__



    def __sub__(self, GEN_2: 'pari_GEN') -> "pari_GEN":
        return _YASHE.pari_GEN___sub__(self, GEN_2)

    def __mod__(self, GEN_2: 'pari_GEN') -> "pari_GEN":
        return _YASHE.pari_GEN___mod__(self, GEN_2)

    def __eq__(self, GEN_2: 'pari_GEN') -> "bool":
        return _YASHE.pari_GEN___eq__(self, GEN_2)

    def __init__(self, *args):
        this = _YASHE.new_pari_GEN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "char *":
        return _YASHE.pari_GEN___str__(self)

    def __getitem__(self, key: 'int') -> "pari_GEN":
        return _YASHE.pari_GEN___getitem__(self, key)

    def sub_array(self, key_1: 'int', key_2: 'int') -> "pari_GEN":
        return _YASHE.pari_GEN_sub_array(self, key_1, key_2)
    __swig_destroy__ = _YASHE.delete_pari_GEN
    __del__ = lambda self: None
pari_GEN_swigregister = _YASHE.pari_GEN_swigregister
pari_GEN_swigregister(pari_GEN)
cvar = _YASHE.cvar

class parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _YASHE.parameters_n_set
    __swig_getmethods__["n"] = _YASHE.parameters_n_get
    if _newclass:
        n = _swig_property(_YASHE.parameters_n_get, _YASHE.parameters_n_set)
    __swig_setmethods__["Q"] = _YASHE.parameters_Q_set
    __swig_getmethods__["Q"] = _YASHE.parameters_Q_get
    if _newclass:
        Q = _swig_property(_YASHE.parameters_Q_get, _YASHE.parameters_Q_set)
    __swig_setmethods__["T"] = _YASHE.parameters_T_set
    __swig_getmethods__["T"] = _YASHE.parameters_T_get
    if _newclass:
        T = _swig_property(_YASHE.parameters_T_get, _YASHE.parameters_T_set)
    __swig_setmethods__["w"] = _YASHE.parameters_w_set
    __swig_getmethods__["w"] = _YASHE.parameters_w_get
    if _newclass:
        w = _swig_property(_YASHE.parameters_w_get, _YASHE.parameters_w_set)
    __swig_setmethods__["sigma_error"] = _YASHE.parameters_sigma_error_set
    __swig_getmethods__["sigma_error"] = _YASHE.parameters_sigma_error_get
    if _newclass:
        sigma_error = _swig_property(_YASHE.parameters_sigma_error_get, _YASHE.parameters_sigma_error_set)
    __swig_setmethods__["sigma_key"] = _YASHE.parameters_sigma_key_set
    __swig_getmethods__["sigma_key"] = _YASHE.parameters_sigma_key_get
    if _newclass:
        sigma_key = _swig_property(_YASHE.parameters_sigma_key_get, _YASHE.parameters_sigma_key_set)
    __swig_setmethods__["q"] = _YASHE.parameters_q_set
    __swig_getmethods__["q"] = _YASHE.parameters_q_get
    if _newclass:
        q = _swig_property(_YASHE.parameters_q_get, _YASHE.parameters_q_set)
    __swig_setmethods__["t"] = _YASHE.parameters_t_set
    __swig_getmethods__["t"] = _YASHE.parameters_t_get
    if _newclass:
        t = _swig_property(_YASHE.parameters_t_get, _YASHE.parameters_t_set)
    __swig_setmethods__["F"] = _YASHE.parameters_F_set
    __swig_getmethods__["F"] = _YASHE.parameters_F_get
    if _newclass:
        F = _swig_property(_YASHE.parameters_F_get, _YASHE.parameters_F_set)

    def __init__(self):
        this = _YASHE.new_parameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _YASHE.delete_parameters
    __del__ = lambda self: None
parameters_swigregister = _YASHE.parameters_swigregister
parameters_swigregister(parameters)


def Uniform() -> "double":
    return _YASHE.Uniform()
Uniform = _YASHE.Uniform

def Normal() -> "double":
    return _YASHE.Normal()
Normal = _YASHE.Normal

def Gauss(mu: 'double', sigma: 'double') -> "double":
    return _YASHE.Gauss(mu, sigma)
Gauss = _YASHE.Gauss

def Sample(n: 'int', sigma: 'double') -> "pari_GEN":
    return _YASHE.Sample(n, sigma)
Sample = _YASHE.Sample

def generate_random(bit_length: 'int') -> "pari_GEN":
    return _YASHE.generate_random(bit_length)
generate_random = _YASHE.generate_random

def sample_error_polynomial(params: 'parameters', error: 'bool') -> "pari_GEN":
    return _YASHE.sample_error_polynomial(params, error)
sample_error_polynomial = _YASHE.sample_error_polynomial

def custom_mod(*args) -> "GEN":
    return _YASHE.custom_mod(*args)
custom_mod = _YASHE.custom_mod

def generate_secret_key(params: 'parameters') -> "pari_GEN *":
    return _YASHE.generate_secret_key(params)
generate_secret_key = _YASHE.generate_secret_key

def generate_public_key(f_inv: 'pari_GEN', params: 'parameters') -> "pari_GEN":
    return _YASHE.generate_public_key(f_inv, params)
generate_public_key = _YASHE.generate_public_key

def addition(ct_1: 'pari_GEN', ct_2: 'pari_GEN', params: 'parameters') -> "pari_GEN":
    return _YASHE.addition(ct_1, ct_2, params)
addition = _YASHE.addition

def subtraction(ct_1: 'pari_GEN', ct_2: 'pari_GEN', params: 'parameters') -> "pari_GEN":
    return _YASHE.subtraction(ct_1, ct_2, params)
subtraction = _YASHE.subtraction

def multiplication(ct_1: 'pari_GEN', ct_2: 'pari_GEN', params: 'parameters') -> "pari_GEN":
    return _YASHE.multiplication(ct_1, ct_2, params)
multiplication = _YASHE.multiplication

def decimal_to_base_w(x: 'GEN', vector_size: 'int', W: 'int') -> "GEN":
    return _YASHE.decimal_to_base_w(x, vector_size, W)
decimal_to_base_w = _YASHE.decimal_to_base_w

def base_w_decomposition(x: 'GEN', log_q: 'int', n: 'int', w: 'int') -> "GEN":
    return _YASHE.base_w_decomposition(x, log_q, n, w)
base_w_decomposition = _YASHE.base_w_decomposition

def powers_of_w(x: 'GEN', q: 'GEN', log_q: 'int', n: 'int', W: 'int') -> "GEN":
    return _YASHE.powers_of_w(x, q, log_q, n, W)
powers_of_w = _YASHE.powers_of_w
# This file is compatible with both classic and new-style classes.


